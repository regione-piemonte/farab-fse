package it.csi.dma.farmab.interfacews.msg.getgeneraotpdevice;

import java.net.MalformedURLException;
import java.net.URL;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.jws.WebService;
import javax.xml.namespace.QName;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import it.csi.dma.farmab.SpringApplicationContextProvider;
import it.csi.dma.farmab.controller.FarmabController;
import it.csi.dma.farmab.controller.FarmabGestioneDeviceOTPController;
import it.csi.dma.farmab.controller.FarmabLog;
import it.csi.dma.farmab.domain.DmaccTDispositivoCertificazioneOtpRichDomain;
import it.csi.dma.farmab.interfacews.IF.GetGeneraOtpDeviceService;
import it.csi.dma.farmab.util.Constants;
import it.csi.dma.farmab.util.EventoPerNotificatore;
import it.csi.dma.farmab.util.FarmabUtils;
import it.csi.dma.farmab.util.NotificatoreUtil;

/**
 * This class was generated by Apache CXF 2.7.14
 * 2021-10-14T17:01:50.224+02:00
 * Generated source version: 2.7.14
 *
 */
@WebService(targetNamespace = "http://getgeneraotpdevice.msg.interfacews.farmab.dma.csi.it/", name = "GetGeneraOtpDevice", portName = "GetGeneraOtpDevicePort", endpointInterface = "it.csi.dma.farmab.interfacews.IF.GetGeneraOtpDeviceService")
public class GetGeneraOtpDeviceServiceImpl implements GetGeneraOtpDeviceService{

	private final static Logger log = Logger.getLogger(Constants.APPLICATION_CODE);
	@Autowired
	SpringApplicationContextProvider springApplicationContextProvider;

	@Autowired
	FarmabGestioneDeviceOTPController farmabGestioneDeviceOTPController;

	@Autowired
	FarmabController farmabController;

	@Autowired
	NotificatoreUtil notif;

	@Autowired
	FarmabLog farmabLog;

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://getgeneraotpdevice.msg.interfacews.farmab.dma.csi.it/", "GetGeneraOtpDeviceServiceImpl");
    public final static QName GetGeneraOtpDevicePort = new QName("http://getgeneraotpdevice.msg.interfacews.farmab.dma.csi.it/", "GetGeneraOtpDevicePort");
    static {
        URL url = null;
        try {
            url = new URL("file:/D:/subversion/dma/farmab/trunk/docs/farmab_GetGeneraOtpDeviceService.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(GetGeneraOtpDeviceServiceImpl.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/D:/subversion/dma/farmab/trunk/docs/farmab_GetGeneraOtpDeviceService.wsdl");
        }
        WSDL_LOCATION = url;
    }

	@Override
	public GetGeneraOtpDeviceResponse getGeneraOtpDevice(GetGeneraOtpDeviceRequest getGeneraOtpDevice) {
		log.info("GetGeneraOtpDeviceServiceImpl::getGeneraOtpDevice");
		String messaggioSms = "";
		GetGeneraOtpDeviceResponse response= new GetGeneraOtpDeviceResponse();
		response.setEsito(Constants.FAIL_CODE);
		try {
			List<Errore> errore=this.ValidateRequest(getGeneraOtpDevice);
			if(!errore.isEmpty()) {
				//restituisco fallimento con la lista degli errori contenuti nella request
				response.setEsito(Constants.FAIL_CODE);
				ElencoErroriType elencoErrori= new ElencoErroriType();
				elencoErrori.errore=errore;
				response.setElencoErrori(elencoErrori);
				return response;
			}
			//Errori di business
			DmaccTDispositivoCertificazioneOtpRichDomain otp=farmabGestioneDeviceOTPController.getOTP(getGeneraOtpDevice);
			if (otp!=null && otp.getOtp()!=null && otp.getOtp().length()>1) {
				response.setEsito(Constants.SUCCESS_CODE);
				response.setCodiceOtp(otp.getOtp());
				response.setDataInizioValidita(otp.getDataInserimento());
				response.setDataFineValidita(otp.getDataFineValidita());
			}
			//invia notifica OTP

			try {
				//RECUPERO MESSAGGIO PER SMS
				List<EventoPerNotificatore> eventoPerNotificatore =farmabGestioneDeviceOTPController.cercaDatiPerNotficatore("EVFA1",Constants.CITTADINO);
				if(!eventoPerNotificatore.isEmpty() || eventoPerNotificatore !=null) {
					for(EventoPerNotificatore epn: eventoPerNotificatore) {
						messaggioSms=epn.getMsgSms();
					 };
				}

				//RECUPERO LINK PER SMS
				String linkIncompleto = farmabGestioneDeviceOTPController.getLinkOtp();
				String messaggioLinkCompleto = MessageFormat.format(linkIncompleto, response.getCodiceOtp(),getGeneraOtpDevice.getCfCittadino());

				notif.callNotificatore(getGeneraOtpDevice.getCfCittadino(), getGeneraOtpDevice.getRichiedente().getNumeroTransazione(), getGeneraOtpDevice.getRichiedente().getCodiceFiscale(), getGeneraOtpDevice.getTelCittadino(), response.getCodiceOtp(),messaggioLinkCompleto, messaggioSms);

				response.setLink(messaggioLinkCompleto);
				//response.setLink(notif.callNotificatore(getGeneraOtpDevice.getCfCittadino(), getGeneraOtpDevice.getRichiedente().getNumeroTransazione(), getGeneraOtpDevice.getRichiedente().getCodiceFiscale(), getGeneraOtpDevice.getTelCittadino(), response.getCodiceOtp()));

			}catch(Exception ex) {
				log.error(ex.getMessage());
				//TODO Errore da riportare???
			}
		}catch (Exception e) {
			log.error(e.getMessage());
			response.setEsito(Constants.FAIL_CODE);
		}
		return response;
	}



	private List<Errore> ValidateRequest(GetGeneraOtpDeviceRequest request){
		List<Errore> errori= new ArrayList<Errore>();
		errori=this.ValidateRichiedente(request.getRichiedente());
		//--------------------------------------------------------------------------
		//controlli per tag cfCittadino
		if(request.getCfCittadino()==null || request.getCfCittadino().isEmpty()) {
			Errore e = new Errore();
			e.setCodice(Constants.FAR_CC_0050);
			e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), "cfCittadino"));
			errori.add(e);
		} else {
			if(FarmabUtils.isNotValidCf(request.getCfCittadino())) {
				Errore e = new Errore();
				e.setCodice(Constants.FAR_CC_0051);
				e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), "cfCittadino", request.getCfCittadino()));
				errori.add(e);
			}
		}
		//--------------------------------------------------------------------------
		//controlli per tag cfCittadino
		if(request.getTelCittadino()==null || request.getTelCittadino().isEmpty()) {
			Errore e = new Errore();
			e.setCodice(Constants.FAR_CC_0050);
			e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), "telCittadino"));
			errori.add(e);
		} else if (!isNumeric(request.getTelCittadino())) {
			Errore e = new Errore();
			e.setCodice(Constants.FAR_CC_0051);
			e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), "telCittadino", request.getTelCittadino()));
			errori.add(e);
		}

		return errori;
	}

	private static boolean isNumeric(String strNum) {
	    if (strNum == null) {
	        return false;
	    }
	    try {
	        Double.parseDouble(strNum);
	    } catch (NumberFormatException nfe) {
	        return false;
	    }
	    return true;
	}

	private List<Errore> ValidateRichiedente(Richiedente richiedente) {
		List<Errore> errori= new ArrayList<Errore>();
		//trasformare in una lambda
		/*Map<String, Object> myObjectAsDict = new HashMap<>();
		Field[] allFields = Richiedente.class.getDeclaredFields();
		for (Field field : allFields) {
	        Class<?> targetType = field.getType();
	        Object objectValue = targetType.newInstance();
	        Object value = field.get(objectValue);
	        myObjectAsDict.put(field.getName(), value);
	    }*/
		if (richiedente!=null) {
			//controlli per tag ApplicativoVerticale N.A.
			/*
			if(richiedente.getApplicativoVerticale()!=null) {
				if(richiedente.getApplicativoVerticale().getCodice()==null || richiedente.getApplicativoVerticale().getCodice().isEmpty()) {
					Errore e =new Errore();
					e.setCodice("FAR-CC-0050");
					e.setDescrizione("Il parametro applicativoVerticale.codice deve essere valorizzato");
					errori.add(e);
				} else {
					//controllo che sia formalmente corretto ovvero che valga SANSOL quando
					if("SANSOL".compareTo(richiedente.getApplicazione().getCodice())==0 && "FARAB".compareTo(richiedente.getApplicativoVerticale().getCodice())!=0) {
						Errore e =new Errore();
						e.setCodice("FAR-CC-0051");
						e.setDescrizione("Il parametro applicativoVerticale.codice contiene il valore "+richiedente.getApplicativoVerticale().getCodice()+" non corretto");
						errori.add(e);
					}
				}
			} else {
				Errore e =new Errore();
				e.setCodice("FAR-CC-0050");
				e.setDescrizione("Il parametro applicativoVerticale deve essere valorizzato");
				errori.add(e);
			}
			*/
			// end controlli per tag ApplicativoVerticale
//--------------------------------------------------------------------------
			//controlli per tag applicazione
			if(richiedente.getApplicazione()!=null) {
				if(richiedente.getApplicazione().getCodice()==null || richiedente.getApplicazione().getCodice().isEmpty()) {
					Errore e =new Errore();
					e.setCodice(Constants.FAR_CC_0050);
					e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.APPLICAZIONE_0050));
					errori.add(e);
				} else {
					//controllo che sia formalmente corretto ovvero che valga WEBAPP_CM o WEBAPP_CM
					//if("WEBAPP_CM".compareTo(richiedente.getApplicazione().getCodice())!=0) {
					if(Arrays.stream(Constants.APPLICATIONS_RUPAR)
			                .filter(x -> x.equalsIgnoreCase(richiedente.getApplicazione().getCodice()))
			                .findFirst()
			                .orElse(null) == null) {
						Errore e =new Errore();
						e.setCodice(Constants.FAR_CC_0051);
						e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.CODICE_APPLICAZIONE_0051, richiedente.getApplicazione().getCodice()));
						errori.add(e);
					}
				}
			} else {
				Errore e =new Errore();
				e.setCodice(Constants.FAR_CC_0050);
				e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), "applicazione"));
				errori.add(e);
			}
			//end controlli per tag applicazione
//--------------------------------------------------------------------------
			//controlli per tag codiceFiscale
			if (richiedente.getCodiceFiscale() != null) {
				if (richiedente.getCodiceFiscale().isEmpty() || richiedente.getCodiceFiscale().trim().isEmpty()) {
					Errore e = new Errore();
					e.setCodice(Constants.FAR_CC_0050);
					e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), "codiceFiscale"));
					errori.add(e);
				}
				if (FarmabUtils.isNotValidCf(richiedente.getCodiceFiscale())) {
					Errore e = new Errore();
					e.setCodice(Constants.FAR_CC_0051);
					e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), "codiceFiscale", richiedente.getCodiceFiscale()));
					errori.add(e);
				}
			} else {
				Errore e =new Errore();
				e.setCodice(Constants.FAR_CC_0050);
				e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), "codiceFiscale"));
				errori.add(e);
			}
			//end controlli per tag codiceFiscale
//--------------------------------------------------------------------------
			//controlli per tag numeroTransazione
			if(richiedente.getNumeroTransazione().isEmpty()||richiedente.getNumeroTransazione().trim().isEmpty()||richiedente.getNumeroTransazione().length()<1) {
				Errore e =new Errore();
				e.setCodice(Constants.FAR_CC_0050);
				e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), "numeroTransazione"));
				errori.add(e);
			}
			//end controlli per tag numeroTransazione
//--------------------------------------------------------------------------
			//Controlli ruolo
			if(richiedente.getRuolo()==null || richiedente.getRuolo().getCodice()==null || richiedente.getRuolo().getCodice().trim().isEmpty()) {
				Errore e =new Errore();
				e.setCodice(Constants.FAR_CC_0050);
				e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), "ruolo.codice"));
				errori.add(e);
			} else {
				List <String> descrizRuololist=farmabController.getDescrizioneRuoloByCod(richiedente.getRuolo().getCodice());
				if(descrizRuololist==null || descrizRuololist.size()<1) {
					Errore e = new Errore();
					e.setCodice(Constants.FAR_CC_0051);
					e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), "ruolo.codice", richiedente.getRuolo().getCodice()));
					errori.add(e);
				} else {
					//imposto la descrizione del ruolo nella richiesta
					richiedente.getRuolo().setDescrizione(descrizRuololist.get(0));
				}
			}
			// end controlli richiedente vaolorizzato
		} else {
			Errore e =new Errore();
			e.setCodice(Constants.FAR_CC_0050);
			e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), "richiedente"));
			errori.add(e);
		}


		return errori;
	}





}
