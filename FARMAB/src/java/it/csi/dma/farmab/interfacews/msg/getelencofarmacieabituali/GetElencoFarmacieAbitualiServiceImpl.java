/*******************************************************************************
* Copyright Regione Piemonte - 2023
* SPDX-License-Identifier: EUPL-1.2
******************************************************************************/

package it.csi.dma.farmab.interfacews.msg.getelencofarmacieabituali;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.xml.namespace.QName;
import javax.xml.ws.WebServiceClient;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import it.csi.dma.dmadd.deleghebe.DelegaCittadino;
import it.csi.dma.dmadd.deleghebe.DelegaServizio;
import it.csi.dma.dmadd.deleghebe.GetDelegantiResponse;
import it.csi.dma.farmab.SpringApplicationContextProvider;
import it.csi.dma.farmab.controller.FarmabController;
import it.csi.dma.farmab.controller.FarmabFarmacieAbitualiController;
import it.csi.dma.farmab.controller.FarmabLog;
import it.csi.dma.farmab.domain.DmaccTFarmaciaAbitualeDescDomain;
import it.csi.dma.farmab.interfacews.IF.GetElencoFarmacieAbitualiService;
import it.csi.dma.farmab.service.DelegheElencoServizi;
import it.csi.dma.farmab.util.Constants;
import it.csi.dma.farmab.util.FarmabUtils;
import it.csi.iccws.dmacc.FarmaciaService;
import it.csi.iccws.dmacc.GetFarmacieAderentiRequest;
import it.csi.iccws.dmacc.GetFarmacieAderentiResponse;

/**
 * This class was generated by Apache CXF 2.7.14
 * 2021-10-17T18:26:38.270+02:00
 * Generated source version: 2.7.14
 *
 */
@WebServiceClient(name = "GetElencoFarmacieAbitualiServiceImplService",
                  wsdlLocation = "file:/D:/subversion/dma/farmab/trunk/docs/farmab_GetElencoFarmacieAbitualiService.wsdl",
                  targetNamespace = "http://getelencofarmacieabituali.msg.interfacews.farmab.dma.csi.it/")
public class GetElencoFarmacieAbitualiServiceImpl implements GetElencoFarmacieAbitualiService {

	private final static Logger log = Logger.getLogger(Constants.APPLICATION_CODE);

    public final static QName SERVICE = new QName("http://getelencofarmacieabituali.msg.interfacews.farmab.dma.csi.it/", "GetElencoFarmacieAbitualiServiceImplService");
    public final static QName GetElencoFarmacieAbitualiPort = new QName("http://getelencofarmacieabituali.msg.interfacews.farmab.dma.csi.it/", "GetElencoFarmacieAbitualiPort");

    private DelegheElencoServizi delegheElencoServizi;

    @Autowired
	SpringApplicationContextProvider springApplicationContextProvider;

	@Autowired
	FarmabFarmacieAbitualiController farmabFarmacieAbitualiController;

	@Autowired
	FarmabController farmabController;

	@Autowired
	FarmabLog farmabLog;

	@Autowired
	FarmaciaService farmacieServiceLCCE;

	public FarmaciaService getFarmacieServiceLCCE() {
		return farmacieServiceLCCE;
	}

	public void setFarmacieServiceLCCE(FarmaciaService farmacieServiceLCCE) {
		this.farmacieServiceLCCE = farmacieServiceLCCE;
	}

    @Override
	public GetElencoFarmacieAbitualiResponse getElencoFarmacieAbituali(GetElencoFarmacieAbitualiRequest getElencoFarmacieAbituali) {
    	log.info("GetElencoFarmacieAbitualiServiceImpl::getElencoFarmacieAbituali");
    	GetElencoFarmacieAbitualiResponse response = new GetElencoFarmacieAbitualiResponse();
    	response.setEsito(Constants.SUCCESS_CODE);
    	List<Errore> errore=this.ValidateRequest(getElencoFarmacieAbituali);
    	if(!errore.isEmpty()) {
			//restituisco fallimento con la lista degli errori contenuti nella request
			response.setEsito(Constants.FAIL_CODE);
			ElencoErroriType elencoErrori= new ElencoErroriType();
			elencoErrori.errore=errore;
			response.setElencoErrori(elencoErrori);
			return response;
		}

    	//CHIAMATA A DELEGHE
    	try {
    		if (Constants.CITTADINO.equalsIgnoreCase(getElencoFarmacieAbituali.richiedente.getRuolo().getCodice()) && !getElencoFarmacieAbituali.getCfCittadino().equalsIgnoreCase(getElencoFarmacieAbituali.richiedente.getCodiceFiscale())) {
    			verificaRAutorizzazioneDeleghe(getElencoFarmacieAbituali,errore);
    		}
		} catch (Exception ex) {
			// TODO Auto-generated catch block
			ex.printStackTrace();
			Errore e= new Errore();
			e.setCodice(Constants.FAR_CC_0056);
			e.setDescrizione(farmabLog.findMesaggiErrore(e.getCodice()));
			errore.add(e);
		}
    	//verifico che esista almeno un idPaziente valido
    	if(farmabController.esistePazienteValido(getElencoFarmacieAbituali.getCfCittadino())<1) {
    		Errore e= new Errore();
			e.setCodice(Constants.FAR_CC_0072);
			e.setDescrizione(farmabLog.findMesaggiErrore(e.getCodice()));
			errore.add(e);
    	}
    	// controllo errori
    	if(errore.size()>0) {
    			ElencoErroriType elencoErrori= new ElencoErroriType();
    			elencoErrori.errore=errore;
    			response.setElencoErrori(elencoErrori);
    			return response;
    	}
    	try {
	    	//Errori di business
	    	List<DmaccTFarmaciaAbitualeDescDomain> listFarmAb= farmabFarmacieAbitualiController.getFarmacieAbituali(getElencoFarmacieAbituali.getCfCittadino());
	    	if(listFarmAb !=null && listFarmAb.size() > 0) {
	    		log.debug("Numero farmacie abituali="+listFarmAb.size());
	    		ElencoFarmacieType elencoFarmacie= new ElencoFarmacieType();
	    		List<Farmacia> listFarm= new ArrayList<Farmacia>();
	    		//ottimizzo richiamo ws LLCE

	    		HashMap<String,it.csi.iccws.dmacc.FarmaciaAderente> mapFarmaciaAderente=new HashMap<String,it.csi.iccws.dmacc.FarmaciaAderente>();
	    		GetFarmacieAderentiRequest getFarmacieAderentiRequest= new GetFarmacieAderentiRequest();
				it.csi.iccws.dmacc.Richiedente richiedente=new it.csi.iccws.dmacc.Richiedente();
				richiedente.setApplicazioneChiamante(getElencoFarmacieAbituali.getRichiedente().getApplicazione().getCodice());
				richiedente.setCodiceFiscaleRichiedente(getElencoFarmacieAbituali.getRichiedente().getCodiceFiscale());
				richiedente.setUuid(getElencoFarmacieAbituali.getRichiedente().getNumeroTransazione());
				getFarmacieAderentiRequest.setRichiedente(richiedente);

				StringBuffer  codici = new StringBuffer (" ");
				it.csi.iccws.dmacc.DatiFarmacia datiFarmacia= new it.csi.iccws.dmacc.DatiFarmacia();
	    		for(DmaccTFarmaciaAbitualeDescDomain fa: listFarmAb) {
    				datiFarmacia.getCodiceFarmacia().add(fa.getFarmaciaCod());
    				codici.append(fa.getFarmaciaCod()+" ");
	    		}
	    		getFarmacieAderentiRequest.setDatiFarmacia(datiFarmacia);
	    		GetFarmacieAderentiResponse farmResp=null;
	    		log.info("RICHIAMO SERVIZIO ESTERNO farmacieServiceLCCE.getFarmacieAderenti per codFarmacia="+codici.toString());
				long startTime = System.currentTimeMillis();
				try {
					farmResp=farmacieServiceLCCE.getFarmacieAderenti(getFarmacieAderentiRequest);
					log.info("RISPOSTA SERVIZIO ESTERNO farmacieServiceLCCE.getFarmacieAderenti:"+(System.currentTimeMillis()-startTime)+" Millis");
				}catch (Exception ex) {
    				response.setEsito(Constants.FAIL_CODE);
    				log.error("Eccezione nel richiamare farmacieServiceLCCE.getFarmacieAderenti"+ex.getMessage());
    				Errore e= new Errore();
    				e.setCodice("FAR-CC-0056");//non esiste mesaggio per lcce
    				e.setDescrizione("Eccezione inaspettata nel richiamare farmacieServiceLCCE.getFarmacieAderenti"+ex.getMessage());
    				errore.add(e);
    			}
				//popolo HashMap con tutti i dati restituiti da LCCE
				if(farmResp!=null && farmResp.getFarmacie()!=null && farmResp.getFarmacie().getFarmaciaAderente()!=null) {
					for (it.csi.iccws.dmacc.FarmaciaAderente farmAderLCCE: farmResp.getFarmacie().getFarmaciaAderente()) {
						mapFarmaciaAderente.put(farmAderLCCE.getCodice(), farmAderLCCE);
					}
				}

	    		for(DmaccTFarmaciaAbitualeDescDomain fa: listFarmAb) {
	    			//find farmacia from Catalogo
	    			if(fa.getFarmaciaCod()!=null && !fa.getFarmaciaCod().isEmpty()) {
	    				Farmacia farm=new Farmacia();
	    				farm.setId(fa.getFarmAbitId()+"");
		    			farm.setCodFarmacia(fa.getFarmaciaCod());
		    			farm.setDataInizioVal(fa.getDataAssociazioneInizio());
		    			farm.setDataFineVal(fa.getDataAssociazioneFine());
		    			//mi ricavo il dettagio dei dati della farmacia dal servizio LCCE
	    				if(!mapFarmaciaAderente.isEmpty()&& mapFarmaciaAderente.containsKey(fa.getFarmaciaCod())) {
	    					it.csi.iccws.dmacc.FarmaciaAderente farmaciaAderente=mapFarmaciaAderente.get(fa.getFarmaciaCod());
	    					if (farmaciaAderente !=null && farmaciaAderente.getCodice()!=null) {
		    					farm.setDescrFarmacia(farmaciaAderente.getNome());
		    					IndirizzoType indirizzo= new IndirizzoType();
		    					if (farmaciaAderente.getIndirizzo()!=null) {
		    						indirizzo.setProvincia(farmaciaAderente.getIndirizzo().getProvincia());
		    						indirizzo.setComune(farmaciaAderente.getIndirizzo().getComune());
		    						indirizzo.setCap(farmaciaAderente.getIndirizzo().getCap());
		    						indirizzo.setIndirizzo(farmaciaAderente.getIndirizzo().getDescrizioneIndirizzo());
		    					}
		    					farm.setIndirizzoFarmacia(indirizzo);
	    					}
	    				} else {
	    					//come da analisi se la farmacia non Ã¨ + valida su LLCE non la consideriamo, un batch deve bonificare i dati
	    					continue;
	    				}



		    			/*commentare
	    				DmaccTCatalogoFarmacie fc=farmabFarmacieAbitualiController.getFirstFarmaciaFromCatalogoFarmacie(fa.getFarmaciaCod());
		    			if (fc != null) {
			    			farm.setDescrFarmacia(fc.getDenomFarmacia());
			    			IndirizzoType indirizzo= new IndirizzoType();
			    			indirizzo.setProvincia(fc.getDenomProvincia());
			    			indirizzo.setComune(fc.getComune());
			    			indirizzo.setCap(fc.getCap());
			    			indirizzo.setIndirizzo(fc.getIndirizzo()+" "+fc.getNumeroCivico());
			    			farm.setIndirizzoFarmacia(indirizzo);
		    			}
		    			//commentare*/
		    			listFarm.add(farm);
	    			}
	    		}
	    		// controllo errori
	        	if(errore.size()>0) {
	        			ElencoErroriType elencoErrori= new ElencoErroriType();
	        			elencoErrori.errore=errore;
	        			response.setElencoErrori(elencoErrori);
	        			return response;
	        	}
	    		elencoFarmacie.farmaciaAbituale=listFarm;
	    		response.setFarmacieAbituali(elencoFarmacie);
	    	}
    	} catch(Exception e) {
    		//TODO riportare eccezioni per malfunzionamento dei server
    		log.error(e.getMessage());
    		response.setEsito(Constants.FAIL_CODE);
    	}
    	return response;
	}

    private void verificaRAutorizzazioneDeleghe(GetElencoFarmacieAbitualiRequest request,List<Errore> errore) throws Exception {
    	GetDelegantiResponse delegaResponse=getDelegheElencoServizi().getDelegantiPerGetFarmaciaAbituale(request);
    	if(delegaResponse!=null && Constants.SUCCESS_CODE.equalsIgnoreCase(delegaResponse.getEsito())) {
			log.debug("Esito della chiamata a deleghe="+delegaResponse.getEsito());
			String gradoDelega=null;
			if(delegaResponse.getDeleganti()!=null && delegaResponse.getDeleganti().getDelegante()!=null) {
				for (DelegaCittadino d :delegaResponse.getDeleganti().getDelegante()) {
					if(d.getCodiceFiscale().equalsIgnoreCase(request.getCfCittadino())){
						//verifico se delega forte
						if (d.getDeleghe()!=null && d.getDeleghe().getDelega()!=null){
							for (DelegaServizio de :d.getDeleghe().getDelega()) {
								if(Constants.CODICE_SERVIZIO_IN_DELEGHE.equalsIgnoreCase(de.getCodiceServizio())) {
									//se grado delega Ã¨ null lo forzo a FORTE
									if(de.getGradoDelega()== null || de.getGradoDelega().trim().isEmpty()) {
										gradoDelega=Constants.GRADO_DELEGA;
									} else {
										gradoDelega=de.getGradoDelega();
									}
								}
							}
						}
					}
				}
			}
			//
			if(gradoDelega!=null && gradoDelega.length()>1) {
				//verifico i dati sulla tabella dmacc_r_autorizzazione_deleghe
				List<Long> ids=farmabFarmacieAbitualiController.getIdVerificaAutorizDeleghe(request.getRichiedente().getRuolo().getCodice(), gradoDelega, "SET_FAR_ABI");
				if(ids==null || ids.size()<1) {
					Errore e= new Errore();
	    			e.setCodice(Constants.FAR_CC_0058);
	    			e.setDescrizione(farmabLog.findMesaggiErrore(e.getCodice()));
	    			errore.add(e);
				}
			} else {
				Errore e= new Errore();
				e.setCodice(Constants.FAR_CC_0058);
    			e.setDescrizione(farmabLog.findMesaggiErrore(e.getCodice()));
    			errore.add(e);
			}
		} else {
			//TODO errore nel richaime del servizio deleghe
			Errore e= new Errore();
			e.setCodice(Constants.FAR_CC_0057);
			e.setDescrizione(farmabLog.findMesaggiErrore(e.getCodice()));
			errore.add(e);
		}
		return;
    }

    private List<Errore> ValidateRequest(GetElencoFarmacieAbitualiRequest request){
    	log.info("GetElencoFarmacieAbitualiServiceImpl::ValidateRequest");

		List<Errore> errori= new ArrayList<Errore>();
		errori=this.ValidateRichiedente(request.getRichiedente());
		//--------------------------------------------------------------------------
		//--------------------------------------------------------------------------
		//controlli per tag cfCittadino
		if(request.getCfCittadino()==null || request.getCfCittadino().isEmpty()) {
			Errore e = new Errore();
			e.setCodice(Constants.FAR_CC_0050);
			e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.CF_CITTADINO_0050));
			errori.add(e);
		} else {
			if(FarmabUtils.isNotValidCf(request.getCfCittadino())) {
				Errore e = new Errore();
				e.setCodice(Constants.FAR_CC_0051);
				e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.CF_CITTADINO_0051, request.getCfCittadino()));
				errori.add(e);
			}
		}
		return errori;
	}

	private List<Errore> ValidateRichiedente(Richiedente richiedente) {
    	log.info("GetElencoFarmacieAbitualiServiceImpl::ValidateRichiedente");

		List<Errore> errori= new ArrayList<Errore>();
		if (richiedente!=null) {
			//controlli per tag ApplicativoVerticale
			//verifico che esista tag applicazione altrimenti delego l'errore al tag successivo
			if (richiedente.getApplicazione()!=null && ("SANSOL".compareTo(richiedente.getApplicazione().getCodice())==0)) {//utile per non avere null pointer exception
				if(richiedente.getApplicativoVerticale()!=null ) {
					if(richiedente.getApplicativoVerticale().getCodice()==null || richiedente.getApplicativoVerticale().getCodice().isEmpty()) {
						Errore e =new Errore();
						e.setCodice(Constants.FAR_CC_0050);
						e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.APPLICATIVO_VERTICALE_0050));
						errori.add(e);
					} else {
						//controllo che sia formalmente corretto ovvero che valga SANSOL quando
						if("SANSOL".compareTo(richiedente.getApplicazione().getCodice())==0 && "FARAB".compareTo(richiedente.getApplicativoVerticale().getCodice())!=0) {
							Errore e =new Errore();
							e.setCodice(Constants.FAR_CC_0051);
							e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.APPLICATIVO_VERTICALE_0051, richiedente.getApplicazione().getCodice()));
							errori.add(e);
						}
					}
				} else {
						Errore e =new Errore();
						e.setCodice(Constants.FAR_CC_0050);
						e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.APPLICATIVO_VERTICALE_0050));
						errori.add(e);
				}
			}
			// end controlli per tag ApplicativoVerticale
//--------------------------------------------------------------------------
			//controlli per tag applicazione
			if(richiedente.getApplicazione()!=null) {
				if(richiedente.getApplicazione().getCodice()==null || richiedente.getApplicazione().getCodice().isEmpty()) {
					Errore e =new Errore();
					e.setCodice(Constants.FAR_CC_0050);
					e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.APPLICAZIONE_0050));
					errori.add(e);
				} else {
					//controllo che sia formalmente corretto ovvero che valga SANSOL o WEBAPP_CM
					if("SANSOL".compareTo(richiedente.getApplicazione().getCodice())!=0 && "WEBAPP_CM".compareTo(richiedente.getApplicazione().getCodice())!=0) {
						Errore e =new Errore();
						e.setCodice(Constants.FAR_CC_0051);
						e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.CODICE_APPLICAZIONE_0051, richiedente.getApplicazione().getCodice()));
						errori.add(e);
					}
				}
			} else {
				Errore e =new Errore();
				e.setCodice(Constants.FAR_CC_0050);
				e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.APPLICAZIONE_0050));
				errori.add(e);
			}
			//end controlli per tag applicazione
//--------------------------------------------------------------------------
			//controlli per tag codiceFiscale
			if (richiedente.getCodiceFiscale() != null) {
				if (richiedente.getCodiceFiscale().isEmpty() || richiedente.getCodiceFiscale().trim().isEmpty()) {
					Errore e = new Errore();
					e.setCodice(Constants.FAR_CC_0050);
					e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.CF_RICHIEDENTE_0050));
					errori.add(e);
				}
				if (FarmabUtils.isNotValidCf(richiedente.getCodiceFiscale())) {
					Errore e = new Errore();
					e.setCodice(Constants.FAR_CC_0051);
					e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.CF_RICHIEDENTE_0051, richiedente.getCodiceFiscale()));
					errori.add(e);
				}
			} else {
				Errore e =new Errore();
				e.setCodice(Constants.FAR_CC_0050);
				e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.CF_RICHIEDENTE_0050));
				errori.add(e);
			}
			//end controlli per tag codiceFiscale
//--------------------------------------------------------------------------
			//controlli per tag numeroTransazione
			if(richiedente.getNumeroTransazione().isEmpty()||richiedente.getNumeroTransazione().trim().isEmpty()||richiedente.getNumeroTransazione().length()<1) {
				Errore e =new Errore();
				e.setCodice(Constants.FAR_CC_0050);
				e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.NUMERO_TRANSAZIONE_0050));
				errori.add(e);
			}
			//end controlli per tag numeroTransazione
//--------------------------------------------------------------------------
			//Controlli ruolo
			if(richiedente.getRuolo()==null || richiedente.getRuolo().getCodice()==null || richiedente.getRuolo().getCodice().trim().isEmpty()) {
				Errore e =new Errore();
				e.setCodice(Constants.FAR_CC_0050);
				e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.CODICE_RUOLO_0050));
				errori.add(e);
			} else {
				List <String> descrizRuololist=farmabController.getDescrizioneRuoloByCod(richiedente.getRuolo().getCodice());
				if(descrizRuololist==null || descrizRuololist.size()<1) {
					Errore e = new Errore();
					e.setCodice(Constants.FAR_CC_0051);
					e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), Constants.CODICE_RUOLO_0051, richiedente.getRuolo().getCodice()));
					errori.add(e);
				} else {
					//imposto la descrizione del ruolo nella richiesta
					richiedente.getRuolo().setDescrizione(descrizRuololist.get(0));
				}
			}
			// end controlli richiedente vaolorizzato
		} else {
			Errore e =new Errore();
			e.setCodice(Constants.FAR_CC_0050);
			e.setDescrizione(MessageFormat.format(farmabLog.findMesaggiErrore(e.getCodice()), "richiedente"));
			errori.add(e);
		}


		return errori;
	}

	//GET E SET PER CARICARE LA CLASSE DelegheElencoServizi
	public DelegheElencoServizi getDelegheElencoServizi() {
		return delegheElencoServizi;
	}

	public void setDelegheElencoServizi(DelegheElencoServizi delegheElencoServizi) {
		this.delegheElencoServizi = delegheElencoServizi;
	}


}
