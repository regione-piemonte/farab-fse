<?xml version="1.0" encoding="UTF-8"?>

<!-- ##################################################### -->
<!-- # build.xml file per compilazione e generazione     # -->
<!-- # del pacchetto per il rilascio dell'applicazione.  # -->
<!-- #                                                   # -->
<!-- # Per una lista completa dei tasks eseguibili usare # -->
<!-- # l'argomento di ant -projecthelp quando si         # -->
<!-- # richiama questo build.xml.                        # -->
<!-- ##################################################### -->

<project basedir="."
         default="default"
         name="farmab"
         xmlns:ivy="antlib:fr.jayasoft.ivy.ant" >

	<description>Build file per il progetto: [farmab]</description>

	<!-- -->
	<echo message="Loading build properties..." />
	<property file="buildfiles/build.properties" />
	<property file="buildfiles/build.locale.properties" />
	<property file="buildfiles/${target}.properties" />


	<!--	<taskdef name="encrypt" classname="EncryptTask" classpath="buildfiles/taskdef" />
	<taskdef name="decrypt" classname="DecryptTask" classpath="buildfiles/taskdef" />-->

<!--	<taskdef name="encrypt" classname="EncryptTask" classpath="buildfiles/taskdef" />
	<loadproperties srcfile="test.properties" />
	 <loadfile property="secret" srcFile="isan_dma-secret.key" failonerror="false" />

	<encrypt key="${secret}" property="a" />

	<echo>a: ${a}</echo>
-->

	<!--<property name="secret" value="${SECRET_PWD}"/>
	 <decrypt key="${secret}" decryptAll="true" />
	<decrypt key="${secret}" property="encryptionkey" />
	<property name="secret" value="${SECRET_PWD}"/>
		<taskdef name="encrypt" classname="EncryptTask" classpath="buildfiles/taskdef" />

		<target name="encrypt" description="use -Dvalue=[value to encrypt]">
			<encrypt key="${secret}" value="${value}" />
			<echo>a: ${secret}</echo>
		</target>
	-->

	<!-- <taskdef name="decrypt" classname="DecryptTask" classpath="buildfiles/taskdef" /> -->
	<!-- <loadproperties srcfile="test.properties" /> -->
	<!-- <echo>a: ${secret}</echo> -->
	<!-- <loadfile property="secret" srcFile="isan_dma-secret.key" failonerror="false" /> -->

	<!-- <decrypt key="${secret}" property="test.encryption_key" /> -->

	<!-- <echo> test.encryption_key: ${test.encryption_key}</echo> -->


	<!-- -->
	<path id="library.ref">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>

	<target name="ntime">
		  <tstamp>
		   <format property="etime" pattern="yyyyMMddHHmmss" />
		  </tstamp>

		  <property name="serial" value="${version}_${etime}"/>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: init                                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="init"  depends="ntime" description="Inizializza lo script Ant.">
		<tstamp />
		<condition property="target" value="dev">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>
		<mkdir dir="${build}/classes" />
		<mkdir dir="${temp}/${target}/${earLib}" />
		<mkdir dir="${build}/archives/${target}" />
		<mkdir dir="${dist}/${target}" />
		<mkdir dir="${build}/javadoc" />
		<mkdir dir="${build}/jsp" />
		<mkdir dir="${build}/cache" />
	</target>




	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: default                                           # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="default"
	        description="Eseguire il build per l'environment
	                     specificato a linea di comando con
	                     -Dtarget=${target} o per tutti gli
	                     environment (se non specificato).">

		<condition property="first-call" value="distribution">
			<not>
				<equals arg1="${target}" arg2="$${target}" />
			</not>
		</condition>

		<condition property="first-call" value="all-targets">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>

		<echo message="server: ${server}" />
		<echo message="target: ${target}" />
		<echo message="first-call: ${first-call}" />

		<antcall target="clean-all" />
		<antcall target="${first-call}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: all-targets                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="all-targets"
	        description="Esegue il build per le varie distribuzioni in sequenza.">
		<!--PROTECTED REGION ID(R-1748880042) ENABLED START-->
		<!-- Inserire le varie distribuzioni di cui si intende eseguire il build. -->
		<antcall target="distribution" />
		<!--PROTECTED REGION END-->
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: distribution                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="distribution" depends="package-all"
	        description="Costruisce il tar per la distribuzione." >
		<echo message="====== Creating distribution for ${target} ..."/>
		<echo message="====== Basedir: ${build}/archives/${target} ..."/>
	<!--	<copy todir="${build}/archives/${target}" overwrite="true">
			<fileset file="${build}/temp/conf/tar/apisan-ds.xml" />

		</copy> -->
		<tar tarfile="${dist}/${target}/${dist-file-name}.tar"
		     basedir="${build}/archives/${target}"
		     includes="*.ear,*.xml">
			<tarfileset dir="buildfiles">
				<include name="readme.txt"/>
			</tarfileset>
		</tar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: resolve-dependencies                               # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="resolve-dependencies"
	        description="carica le librerie dal repository remoto">
		<ivy:configure file="${basedir}/buildfiles/ivyconf.xml" />
		<ivy:resolve file="${basedir}/buildfiles/ivy.xml" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: internal target: load-dependencies                 # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="load-dependencies"
	        depends="resolve-dependencies"
	        description="Risolve le dipendenze esterne.">
		<ivy:retrieve pattern="${basedir}/lib/[artifact].[type]" />

		<copy todir="${lib}">
			<fileset dir="lib_ext" />
		</copy>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: compile-all                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="compile-all" depends="init,load-dependencies"
	        description="Compila tutti i sorgenti.">

		<echo message="===> Target: ${target}" />

		<!-- compilazione dei sorgenti -->
		<javac srcdir="${src}/java" destdir="${build}/classes"
		       optimize="on" deprecation="on"
		       compiler="modern"
		       debug="on" debuglevel="lines,vars,source"
			   includeantruntime="false"
			 >
			<classpath refid="library.ref" />
		</javac>

		<!-- copia dei sorgenti -->
		<copy todir="${build}/classes">
			<fileset dir="${src}/java" excludes="**/*.java*,**/*.jbx*" />
		</copy>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-recreate                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-recreate"
	        description="Ricrea l&apos;environment di configurazione per il target corrente (per applicare le sostituzionidelle variabili).">
		<mkdir dir="build/temp/conf" />
			<copy todir="build/temp/conf" overwrite="true">
		<fileset dir="${conf}" />
		</copy>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-config                                # -->
	<!-- #         Gestire qui i  replace delle variabile d'ambiente # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-config"
	        description="Predispone le configurazioni dipendenti dall&apos;ambiente." >

		<replace dir="${build}/temp/conf" >
		</replace>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-all                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-all"
	        description="Esegue il packaging di ogni componente del prodotto">
		<antcall target="package-ear">
			<param name="component.name" value="farmab"/>
			<param name="service.name" value="farmab"/>
			<param name="binding.code" value="ws"/>
			<param name="service.type" value="appl"/>
		</antcall>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-ear                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-ear"
            depends="environment-recreate, compile-all, package-commons-jar,
                     package-ws-war"
            description="costruisce l&apos;ear">

		<replace dir="${temp}/conf/ear/farmab">
					<include name="application.xml" />
					<replacefilter token="@context@" value="${context}" />
		</replace>

		<!-- librerie infrastrutturali o client di servizi fruiti -->
		<copy todir="${temp}/${target}/${earLib}">
			<fileset dir="${lib}" includes="${ear-libs-filter} ${ear-custom-libs-filter}" />
			<fileset dir="${build}/archives/${target}" includes="*common.jar" />

		</copy>

		<ear appxml="${temp}/conf/ear/farmab/application.xml"
		     destfile="${build}/archives/${target}/${ear-file-name}.ear">
			<fileset dir="${build}/archives/${target}" includes="*.jar,*.war" excludes="*client*.jar,*common.jar" />
			<fileset dir="${temp}/${target}">
				<include name="**/*" />
				<exclude name = "src/**"/>
			</fileset>
			<metainf dir="${temp}/conf/ear/farmab/" includes="jboss-deployment-structure.xml" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Target" value="${target}" />
				<attribute name="Appl-Version" value="${version}" />
			</manifest>
		</ear>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-ws-war                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-ws-war"
	        description="Costruisce il war per un singolo web service">
		<!-- prende in input i parametri: component.name, service.name, binding.code, service.type, service.ver (deve essere a 2 cifre!!!) -->

				<delete file="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/classes/conf.properties" />

				  <copy file="buildfiles/${target}.properties" tofile="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/classes/conf.properties">
				   <filterchain>
				    <replacetokens>
				     	<token key="release" value="${serial}" />
				    </replacetokens>
				   </filterchain>
				  </copy>

				<!-- DELEGA -->
				<replace dir="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF">
							<include name="applicationContext.xml" />
							<replacefilter token="@delegheCittadiniUser@" value="${delegheCittadiniUser}" />
							<replacefilter token="@delegheCittadiniPassword@" value="${delegheCittadiniPassword}" />
							<replacefilter token="@delegheCittadiniAddress@" value="${delegheCittadiniAddress}" />
							<replacefilter token="@pazienteServiceURL@" value="${pazienteServiceURL}" />
							<replacefilter token="@encryptionkey@" value="${encryptionkey}" />
				</replace>

				<!-- NOTIF -->
				<replace dir="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF">
					<include name="applicationContext.xml" />
					<replacefilter token="@notificatoreEndPoint@" value="${notificatoreEndPoint}" />
					<replacefilter token="@notificatoreToken@" value="${notificatoreToken}" />
					<replacefilter token="@notificatoreURLSansol@" value="${notificatoreURLSansol}" />

					<replacefilter token="@pazienteServiceUser@" value="${pazienteServiceUser}" />
					<replacefilter token="@pazienteServicePassword@" value="${pazienteServicePassword}" />
					<replacefilter token="@pazienteServiceURL@" value="${pazienteServiceURL}" />

					<replacefilter token="@userFarmacie@" value="${userFarmacie}" />
					<replacefilter token="@passFarmacie@" value="${passFarmacie}" />
					<replacefilter token="@endpointFarmacieServiceUrl@" value="${endpointFarmacieServiceUrl}" />

					<replacefilter token="@fseStatoConsensiUser@" value="${fseStatoConsensiUser}" />
					<replacefilter token="@fseStatoConsensiPassword@" value="${fseStatoConsensiPassword}" />
					<replacefilter token="@fseStatoConsensiUrl@" value="${fseStatoConsensiUrl}" />

					<replacefilter token="@endpointIrideUrl@" value="${endpointIrideUrl}" />

					<replacefilter token="@ricercaDocumentiUrl@" value="${ricercaDocumentiUrl}" />
				</replace>

				<war destfile="${build}/archives/${target}/${service.type}-${service.name}-${binding.code}.war"
				     webxml="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/web.xml"
				     roundup="false">
					<webinf dir="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/">
						<include name="*.xml"/>
						<include name="*.properties"/>
					</webinf>
					<metainf dir="${temp}/conf/web/${service.name}/${binding.code}/META-INF/">
						<include name= "org.apache.cxf.Logger" />
 					</metainf>
					<classes dir="${build}/classes">
					    <include name="it/csi/dma/farmab/**"/>
						<include name="it/csi/dma/dmafarma/**"/>
						<include name="it/csi/dma/dmairidecache/**"/>
						<include name="it/csi/iccws/**"/>
						<include name="it/csi/consensoini/**"/>
						<include name="it/csi/ricercapaziente/**"/>
						<include name="it/csi/ricercadocumentiini/**"/>
					</classes>


					<classes dir="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/classes">
						<include name="*.xml"/>
						<include name="*.properties"/>
				    </classes>

					<lib dir="${lib}" includes="*" excludes="${war-exclude-libs-filter}, ${war-exclude-custom-libs-filter}" />

					<!-- se sono presenti risorse web statiche vengono inserite nel pacchetto
					     es. distribuizone webpack gia' buildata della parte client di una
					     Single Page Application -->
					<fileset dir="${src}/web/${service.name}/${binding.code}" includes="**"></fileset>
				</war>

	</target>





	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-commons-jar                                # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-commons-jar" description="Genera il jar per le classi comuni.">
		<jar destfile="${build}/archives/${target}/apisanfse-common.jar"
		     basedir="${build}/classes"
		     includes="it/csi/farmab/business/**">
		</jar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-all                                        # -->
	<!-- ############################################################# -->
	<!-- nota: non cancella la directory "dist" appositamente: v. STDMDD-495.
	per ripulire anche la "dist" richiamare esplicitamente il target "clean-dist" -->
	<!-- -->
	<target name="clean-all" description="Rimuove tutte le cartelle temporanee."
	        depends="clean-archives, clean-cache, clean-classes, clean-javadoc, clean-jsp, clean-temp" />

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-cache                                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-cache"
	        description="Rimuove la cartella di cache di Ivy e la lib.">
		<delete dir="${build}/cache" failonerror="no" />
		<delete dir="${lib}" failonerror="no" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-temp                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-temp"
	        description="Rimuove la cartella dei files temporanei di build.">
		<delete dir="${temp}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-archives                                  # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-archives"
	        description="Rimuove la cartella degli archivi (war, ear, ...).">
		<delete dir="${build}/archives" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-dist                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-dist"
	        description="Rimuove la cartella delle distribuzioni.">
		<delete dir="${dist}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-classes                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-classes"
	        description="Rimuove la cartella dei sorgenti compilati.">
		<delete dir="${build}/classes" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-javadoc                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-javadoc"
	        description="Rimuove la cartella temporanea dei javadoc.">
		<delete dir="${build}/javadoc" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-jsp                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-jsp"
	        description="Rimuove la cartella temporanea delle jsp compilate.">
	<delete dir="${build}/jsp" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: _clean-web-inf                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="_clean-web-inf"
	        description="Rimuove il contenuto di lib e classes della
	                     web application (per run locali).">
		<delete dir="${srcweb}/WEB-INF/classes" />
		<delete dir="${srcweb}/WEB-INF/lib" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about                                             # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about" description="Visualizza l'elenco dei target pubblici dello script.">
		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about" srcfile="buildfiles/about.txt" />
		<echo message="${about}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about-custom                                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about-custom"
	        description="Visualizza l'elenco di tutti i target,
	                     pubblici e privati
	                     (equivalente a 'ant -projecthelp')" >

		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about-custom" srcfile="buildfiles/about-custom.txt" />
		<echo message="${about-custom}" />
		<java classname="org.apache.tools.ant.Main">
			<arg value="-projecthelp" />
		</java>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: show-vars                                         # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="show-vars" depends="init"
	        description="Visualizza tutte le variabili impostate nei file di properties e/o da linea di comando">
		<echo message="*****************************************" />
		<echo message="********  ${componente} environment  *******" />
		<echo message="*****************************************" />
		<echoproperties />
		<echo />
		<echo />
		<echo message="*****************************************" />
		<echo message="********    java properties      ********" />
		<echo message="*****************************************" />
		<echoproperties prefix="java."/>
	</target>


	<taskdef resource="net/sf/antcontrib/antlib.xml"/>

	<!--PROTECTED REGION ID(R-1189158753) ENABLED START-->
	<!-- inserire qui eventuali target extra -->
	<!--PROTECTED REGION END-->

</project>
